buffer
attribute_buffer
mesh_buffers


vertices, colors, indices, ...

// alokujem a inicializujem miesto pre dáta

ptr<gpubuffer> verts_buf = make_ptr<gpubuffer>();
verts_buf->data(3*3*sizeof(GLfloat), (GLvoid *)vertices, buffer_usage::STATIC_DRAW);

ptr<gpubuffer> color_buf = make_ptr<gpubuffer>();
color_buf->data(4*3*sizeof(GLfloat), (GLvoid *)colors, buffer_usage::STATIC_DRAW);

ptr<gpubuffer> indices_buf = make_ptr<gpubuffer>();
indices_buf->data(3*sizeof(GLuint), (GLvoid *)indices, buffer_usage::STATIC_DRAW);


// mriežka predstavuje spojenie týchto dát (a meta informácií) do logického celku

mesh = new mesh_buffers();

mesh->append_attribute(
	make_ptr<attribute_buffer>(positionID, 3, attribute_type::A32F, verts_buf));

mesh->append_attribute(
	make_ptr<attribute_buffer>(colorID, 4, attribute_type::A32F, color_buf));

mesh->indices(
	make_ptr<attribute_buffer>(-1 /*not used*/, -1 /*not used*/, attribute_type::A32UI, indices_buf));

mesh->nvertices = 3;
mesh->nindices = 3;
mesh->mode = mesh_mode::TRIANGLES;






ptr<mesh_buffers> m = make_ptr<mesh_buffers>();
...
for (unsigned int i = 0; i < attributeCount; ++i) {
	m->append_attribute(attributeIds[i], attributeComponents[i],
		vertexSize, attributeTypes[i], attributeNorms[i]);
}

ptr<attribute_buffer> ab = m->attribute(j);

...

ptr<gpubuffer> gpub(new gpubuffer());
gpub->data(vertexCount * vertexSize, vertexBuffer, buffer_usage::STATIC_DRAW);
for (int i = 0; i < m->attribute_count(); ++i) {
	m->attribute(i)->buf(gpub);
}

...

gpub = make_ptr<gpubuffer>();
gpub->data(indiceCount * indiceSize, indiceBuffer, buffer_usage::STATIC_DRAW);
m->indices(make_ptr<attribute_buffer>(0, 1, type, gpub));


(?) Ako pracovať s bufferom ?

gpubuffer triangle_buf;
triangle_buf.reserve(7*3*sizeof(GLfloat));
triangle_buf.subdata(0, 3*3*sizeof(GLfloat), (GLvoid *)vertices);
triangle_buf.subdata(3*3*sizeof(GLfloat), 3*4*sizeof(GLfloat), (GLvoid *)colors);
triangle_buf.bind(GL_ARRAY_BUFFER);

alebo rovno ako

gpubuffer buf;

buf.data(7*3*sizeof(GLfloat), (GLvoid *)vertices);


gpubuffer buf;
buf.reserve(

vertices, uv, normals


// interné použitie
bind()
unbind()
data()

všetky dáta s mesh sa prečítajú do bloku pamete (rôzne atrributy)
jednotlivé atributy popisujú jednotlivé časti dát (vrcholy, uv, normaly, farba)

Takže všetko sa prečíta do bloku pamete, vytvorí sa buffer (gpubuffer) a
načítane dáta sa doň skopírujú. Každému atribútu sa tento buffer priradí.

Pre indexi sa vytvára nový buffer.

// vytvorenie a inicializácia buffer 
ptr<gpubuffer> gpub(new gpubuffer());
gpub->data(vertexCount * vertexSize, vertexBuffer, buffer_usage::STATIC_DRAW);

// priradenie do atributou
for (int i = 0; i < m->attribute_count(); ++i)
	m->attribute(i)->buf(gpub);



gpubuffer common_buffer;

nattrs = ...
vector<attribute_buffer> attrs(nattrs);
for (i = 0; i < narrts; ++i)
	index = ...
	size = ...
	type = ...
	norm = ...
	stride = ...
	offset = ...
	attr = attribute_bufer(index, size, type, norm, common_buffer, stride, offset)
	attrs[i] = attr

data = ...
common_buffer.data(data)


(?) čo sú jednotlivé parametre ?

index: specifies the index of the generic vertex attribute to be modified (id
	atributu zo shader programu pozri glGetAttribLocation())

size: specifies the number of components per attribute and must be 1, 2, 3, 4,
	or GL_BGRA

type: specifies the data type of each component

stride: specifies the byte stride from one attribute to the next (allowing
	vertices and attributes to be packed into a single array)

normalized: specifies whether fixed-point data values should be normalized
	offset 

[Ukážka:

	GLfloat vertices[] = {
		-0.5f, -0.5f, 0.0f,
		0.5f, -0.5f, 0.0f,
		0.0f, 0.5f, 0.0f};

	GLfloat colors[] = {
		1.0f, 0.0f, 0.0f, 1.0f,
		0.0f, 1.0f, 0.0f, 1.0f,
		0.0f, 0.0f, 1.0f, 1.0f};

	// vytvorenie bufferu, alokácia a inicializácia dát
	glGenBuffers(1, &vbo);
	glBindBuffer(GL_ARRAY_BUFFER, vbo);
	glBufferData(GL_ARRAY_BUFFER, 7*3*sizeof(GLfloat), NULL, GL_STATIC_DRAW);
	glBufferSubData(GL_ARRAY_BUFFER, 0, 3*3*sizeof(GLfloat), vertices);
	glBufferSubData(GL_ARRAY_BUFFER, 3*3*sizeof(GLfloat), 3*4*sizeof(GLfloat), 
		colors);

	position_id = glGetAttribLocation(program_id, "position");
	color_id = glGetAttribLocation(program_id, "color");

	glVertexAttribPointer(position_id, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glVertexAttribPointer(
		color_id, 4, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(3*3*sizeof(GLfloat)));

--- koniec ukážky].

Štruktúru buffer môžem použiť takto [Ukážka:

	vertices[] = ...
	colors[] = ...

	gpubuffer buf;
	buf.reserve(7*3*sizeof(GLfloat));
	buf.subdata(0, 3*3*sizeof(GLfloat), vertices);
	buf.subdata(3*3*sizeof(GLfloat), 3*4*sizeof(GLfloat), colors);

	position_id = ...

--- koniec ukážky] ak mám dáta v jednom bufferi, potom môžem buffer použiť takto
[Ukážka:

	position_id = glGetAttribLocation(program_id, "position");
	color_id = glGetAttribLocation(program_id, "color");

	GLfloat common_data[] = {  // vertex:3, color:4
		-0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,	
		0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f,
		0.0f, 0.5f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f};

	gpubuffer buf;
	buf.data(7*3*sizeof(GLfloat), common_data);
	buf.bind(GL_ARRAY_BUFFER);

	glVertexAttribPointer(position_id, 3, GL_FLOAT, GL_FALSE,
		7*sizeof(GLfloat), 0);

	glVertexAttribPointer(color_id, 4, GL_FLOAT, GL_FALSE,
		7*sizeof(GLfloat), BUFFER_OFFSET(3*sizeof(GLfloat)));

--- koniec ukážky] dáta uložené v common_data sú prekladané tzn. 3 súradnice
vrcholu nasledované 4mi komponentami farby. Parameter stride teda je
3*sizeof(GLfloat).

Volania glVertexAttribPointer() môžem nahradiť štruktúrou attribute_buffer
[Ukážka:

	gpubuffer buf;
	buf.data(7*3*sizeof(GLfloat), common_data);	

	attr_position = attribute_buffer(position_id, A32F, false, buf, 0, 0);
	attr_color = attribute_buffer(
		color_id, A32F, false, buf, 0, 3*3*sizeof(Glfloat));
	
	m = mesh_buffers();
	m.add_attribute(attr_position);
	m.add_attribute(attr_color);
	m.add_indices(indices);

--- koniec ukážky].

tu by sa hodila funkcia 

	add_attributes(vector<attribute_buffer>)



Trieda gpubuffer implementuje buffer-objekt, môžem ju použiť takto
[Ukážka:

	GLfloat common_data[] = {
		-0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,	
		0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f,
		0.0f, 0.5f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f};
	};

	gpubuffer buf;
	buf.data(sizeof(common_data), common_data);
	buf.bind(GL_ARRAY_BUFFER);
	
	position_attr = make_ptr<attribute_buffer>(position_id, 3, A32F, buf,
		7*sizeof(GLfloat));

	color_attr = make_ptr<attribute_buffer>(color_id, 4, A32F, buf, 
		7*sizeof(GLfloat), 3*sizeof(GLfloat));

	m = mesh_buffers();
	m.append_attribute(position_attr);
	m.append_attribute(color_attr);
	m.mode = ...
	m.nvertices = ...
	m.nindices = ...

--- koniec ukážky].

attribute_buffer mi nič neulahčuje

